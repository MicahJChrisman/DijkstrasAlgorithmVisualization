{"version":3,"sources":["Grid.js","Game.js","index.js"],"names":["Square","props","className","onClick","style","isWall","key","Grid","i","this","squares","grid","x","rows","y","push","renderSquare","React","Component","Game","state","initializeGrid","setter","background","setState","backgroundImage","handleClick","backgroundColor","animateDijkstra","window","location","reload","orderedGrid","dijkstras","finalPath","getPath","node","length","id","endNode","path","current","unshift","prevSquare","startNode","distance","unvisitedSquares","sort","squareA","squareB","closestSquare","shift","Infinity","visited","updateNeighbors","square","neighbors","getNeighbors","neighbor","filter","Start","Finish","Gap","Array","fill","ReactDOM","render","document","getElementById"],"mappings":"sMAGA,SAASA,EAAOC,GACZ,OACI,wBACIC,UAAW,UACXC,QAASF,EAAME,QACfC,MAAOH,EAAMG,MAEbC,OAAQJ,EAAMI,QADTJ,EAAMK,K,IAMFC,E,2KACJC,GAAG,IAAD,OACX,OAAO,cAACR,EAAD,CAEHI,MAAOK,KAAKR,MAAMS,QAAQF,GAAKC,KAAKR,MAAMS,QAAQF,GAAGJ,MAAQ,KAC7DC,OAAQI,KAAKR,MAAMS,QAAQF,GAAGH,OAC9BF,QAAS,kBAAM,EAAKF,MAAME,QAAQK,KAH7BA,K,+BAST,IADA,IAAMG,EAAO,GACLC,EAAE,EAAGA,EAAE,GAAIA,IAAI,CAEnB,IADA,IAAMC,EAAO,GACJC,EAAE,EAAGA,EAAE,GAAIA,IACjBD,EAAKE,KAAKN,KAAKO,aAAe,GAAFJ,EAAOE,IAEtCH,EAAKI,KAAK,qBAAKb,UAAU,MAAf,SAA8BW,GAAJD,IAGxC,OACI,8BACKD,Q,GAtBiBM,IAAMC,WCVnBC,E,kDACjB,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTV,QAASW,KAHJ,E,wDAQDb,GAGA,IAKIc,EAPH,KAANd,GAAkB,KAANA,IACRC,KAAKW,MAAMV,QAAQF,GAAGH,SACjBiB,EAASb,KAAKW,MAAMV,QAAQF,IACzBJ,MAAQ,CAACmB,WAAY,QAC5BD,EAAOjB,QAAS,EAChBI,KAAKe,SAAS,CAACF,cAEXA,EAASb,KAAKW,MAAMV,QAAQF,IACzBJ,MAAQ,CAACqB,gBAAkB,mpBAClCH,EAAOjB,QAAS,EAChBI,KAAKe,SAAS,CAACF,e,+BAMlB,IAAD,OACJ,OACI,qBAAKpB,UAAU,OAAf,SACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,SAAf,UACI,0DACA,qBAAKA,UAAU,OAAf,SACI,cAAC,EAAD,CACIC,QAAS,SAACK,GAAD,OAAO,EAAKkB,YAAYlB,IACjCE,QAASD,KAAKW,MAAMV,eAIhC,sBAAKR,UAAU,SAAf,UACI,mLACA,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,OAAf,UACI,wBACIA,UAAW,2BACXE,MAAO,CAACuB,gBAAiB,YAE7B,qDAGR,qBAAKzB,UAAU,MAAf,SACI,sBAAKA,UAAU,OAAf,UACI,wBACIA,UAAW,4BAEf,mDAGR,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,OAAf,UACI,wBACIA,UAAW,4BAEf,4DAGR,wBACIA,UAAU,cACVC,QAAS,SAACK,GAAD,OAAM,EAAKoB,mBACpBlB,QAASD,KAAKW,MAAMV,QAHxB,mBAKA,wBACIR,UAAU,cACVC,QAAS,SAACK,GAAD,OAAMqB,OAAOC,SAASC,UAFnC,6B,wCAchB,IAFA,IAAMC,EAAcvB,KAAKwB,UAAUxB,KAAKW,MAAMV,QAAS,GAAI,IACrDwB,EAAYzB,KAAK0B,QAAQH,EAAa,IACpCI,EAAO,EAAGA,EAAMJ,EAAYK,OAAQD,IAAO,EAC3Cd,EAASb,KAAKW,MAAMV,QAAQsB,EAAYI,GAAME,KAC3ClC,MAAQ,CAACmB,WAAY,WAC5Bd,KAAKe,SAAS,CAACF,WAGnB,IAAQc,EAAO,EAAGA,EAAMF,EAAUG,OAAQD,IAAO,CAC7C,IAAId,KAASb,KAAKW,MAAMV,QAAQwB,EAAUE,GAAME,KACzClC,MAAQ,CAACmB,WAAY,WAC5Bd,KAAKe,SAAS,CAACF,c,8BAIfX,EAAM4B,GAGV,IAFA,IAAMC,EAAO,GACTC,EAAU9B,EAAKA,EAAK0B,OAAS,GACf,OAAZI,GACFD,EAAKE,QAAQD,GACbA,EAAUA,EAAQE,WAEtB,OAAOH,I,gCAGD7B,EAAMiC,EAAWL,GACvB,IAAIP,EAAc,GACHrB,EAAKiC,GACXC,SAAW,EAEpB,IADA,IAAIC,EAAmB,GACflC,EAAI,EAAGA,EAAI,IAAKA,IAChBkC,EAAiB/B,KAAKJ,EAAKC,IAGnC,KAAMkC,EAAiBT,OAAS,GAAE,CAG9B,GAFAS,EAAiBC,MAAK,SAACC,EAASC,GAAV,OAAsBD,EAAQH,SAAWI,EAAQJ,aAE3C,KADxBK,EAAgBJ,EAAiBK,SACpB9C,OAAjB,CAGA,GAAG6C,EAAcL,WAAaO,IAC1B,OAAOpB,EAOP,IAAIkB,EAHR,GAFAA,EAAcG,SAAU,EACxBrB,EAAYjB,KAAKmC,GACdJ,EAAiB,GAAGR,KAAOC,EAM1B,OALA9B,KAAK6C,gBAAgBJ,EAAevC,GACpCmC,EAAiBC,MAAK,SAACC,EAASC,GAAV,OAAsBD,EAAQH,SAAWI,EAAQJ,aACnEK,EAAgBJ,EAAiBK,SACvBE,SAAU,EACxBrB,EAAYjB,KAAKmC,GACVlB,EAEXvB,KAAK6C,gBAAgBJ,EAAevC,O,sCAI5B4C,EAAQ5C,GAEpB,IADA,IAAM6C,EAAY/C,KAAKgD,aAAaF,EAAQ5C,GACpC+C,EAAW,EAAGA,EAAWF,EAAUnB,OAAQqB,IAC/C/C,EAAK6C,EAAUE,GAAUpB,IAAIO,SAAWU,EAAOV,SAAU,EACzDlC,EAAK6C,EAAUE,GAAUpB,IAAIK,WAAaY,I,mCAIrCA,EAAQ5C,GACjB,IAAM6C,EAAY,GAalB,OAZGD,EAAOjB,GAAK,IAAM,GACjBkB,EAAUzC,KAAKJ,EAAK4C,EAAOjB,GAAK,KAEjCiB,EAAOjB,GAAI,GAAI,KACdkB,EAAUzC,KAAKJ,EAAK4C,EAAOjB,GAAK,MAEhCiB,EAAOjB,GAAK,GAAK,KAAO,GACxBkB,EAAUzC,KAAKJ,EAAK4C,EAAOjB,GAAK,KAEhCiB,EAAOjB,GAAK,GAAK,KAAO,GAAKiB,EAAOjB,GAAK,GACzCkB,EAAUzC,KAAKJ,EAAK4C,EAAOjB,GAAK,IAE7BkB,EAAUG,QAAO,SAAAD,GAAQ,OAAKA,EAASL,e,GAlKpBpC,IAAMC,WAsKlC0C,EACF,WAAYtB,GAAI,oBACZ7B,KAAKL,MAAQ,CAACmB,WAAY,WAC1Bd,KAAKJ,QAAS,EACdI,KAAKoC,SAAWO,IAChB3C,KAAK4C,SAAU,EACf5C,KAAKkC,WAAa,KAClBlC,KAAK6B,GAAKA,GAIZuB,EACF,WAAYvB,GAAI,oBACZ7B,KAAKL,MAAQ,CAACmB,WAAY,WAC1Bd,KAAKJ,QAAS,EACdI,KAAKoC,SAAWO,IAChB3C,KAAK4C,SAAU,EACf5C,KAAKkC,WAAa,KAClBlC,KAAK6B,GAAKA,GAIZwB,EACF,WAAYxB,GAAI,oBACZ7B,KAAKL,MAAQ,CAACmB,WAAY,QAC1Bd,KAAKJ,QAAS,EACdI,KAAKoC,SAAWO,IAChB3C,KAAK4C,SAAU,EACf5C,KAAKkC,WAAa,KAClBlC,KAAK6B,GAAKA,GAIlB,SAASjB,IAEL,IADA,IAAMX,EAAUqD,MAAM,KAAKC,KAAK,MACxBpD,EAAI,EAAGA,EAAG,IAAKA,IACnBF,EAAQE,GAAK,IAAIkD,EAAIlD,GAIzB,OAFAF,EAAQ,IAAM,IAAIkD,EAAM,IACxBlD,EAAQ,IAAM,IAAImD,EAAO,IAClBnD,EC9MXuD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.ce56d588.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nfunction Square(props){\r\n    return(\r\n        <button \r\n            className={\"square \"}\r\n            onClick={props.onClick}\r\n            style={props.style}\r\n            key={props.key}\r\n            isWall={props.isWall}\r\n        ></button>\r\n    );\r\n}\r\n\r\nexport default class Grid extends React.Component{\r\n    renderSquare(i){\r\n        return <Square\r\n            key={i}\r\n            style={this.props.squares[i] ? this.props.squares[i].style : null}\r\n            isWall={this.props.squares[i].isWall}\r\n            onClick={() => this.props.onClick(i)}\r\n        />\r\n    }\r\n\r\n    render(){\r\n        const grid = []\r\n        for(let x=0; x<10; x++){\r\n            const rows = [];\r\n            for( let y=0; y<10; y++){\r\n               rows.push(this.renderSquare(x*10 + y));\r\n            }\r\n            grid.push(<div className=\"row\" key={x}>{rows}</div>)\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                {grid}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Grid from './Grid';\r\nimport './index.css';\r\nimport wall from './wall.png'\r\n\r\nexport default class Game extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            squares: initializeGrid(),\r\n        }\r\n\r\n    }\r\n\r\n    handleClick(i){\r\n        if(i !== 22 && i !== 77){\r\n            if(this.state.squares[i].isWall){\r\n                var setter = this.state.squares[i];\r\n                setter.style = {background: \"#FFF\"};\r\n                setter.isWall = false;\r\n                this.setState({setter});\r\n            }else{\r\n                var setter = this.state.squares[i];\r\n                setter.style = {backgroundImage : \"url(\"+wall+\")\"};\r\n                setter.isWall = true;\r\n                this.setState({setter})\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"game\">\r\n                <div className=\"rowa\">\r\n                    <div className=\"column\">\r\n                        <h1>Run Dijkstra's Algorithm</h1>\r\n                        <div className=\"grid\">\r\n                            <Grid \r\n                                onClick={(i) => this.handleClick(i)}\r\n                                squares={this.state.squares}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <h2>Welcome! This React based project utilizes Dijkstra's Algorithm find the shortest path between the two points. Click in the squares to add walls.</h2>\r\n                        <div className=\"row\">\r\n                            <div className=\"rowa\">\r\n                                <button \r\n                                    className={\"squareLegend \" + \"lightSquare\"}\r\n                                    style={{backgroundColor: \"FFFFFF\"}}\r\n                                ></button>\r\n                                <p> Starting Point</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"rowa\">\r\n                                <button \r\n                                    className={\"squareLegend \" +\"darkSquare\"}\r\n                                ></button>\r\n                                <p> Ending Point</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"rowa\">\r\n                                <button \r\n                                    className={\"squareLegend \" +\"wallSquare\"}\r\n                                ></button>\r\n                                <p> Click to add barriers</p>\r\n                            </div>\r\n                        </div>\r\n                        <button \r\n                            className=\"startButton\"\r\n                            onClick={(i)=> this.animateDijkstra()}\r\n                            squares={this.state.squares}\r\n                        >Start</button>\r\n                        <button\r\n                            className=\"startButton\"\r\n                            onClick={(i)=> window.location.reload()}\r\n                        >Reset</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    animateDijkstra(){\r\n        const orderedGrid = this.dijkstras(this.state.squares, 22, 77);\r\n        const finalPath = this.getPath(orderedGrid, 77);\r\n        for(var node = 0; node <orderedGrid.length; node++){\r\n            var setter = this.state.squares[orderedGrid[node].id];\r\n            setter.style = {background: \"#0000FF\"};\r\n            this.setState({setter});\r\n        }\r\n\r\n        for(var node = 0; node <finalPath.length; node++){\r\n            var setter = this.state.squares[finalPath[node].id];\r\n            setter.style = {background: \"#FFFF00\"};\r\n            this.setState({setter});\r\n        }\r\n    }\r\n\r\n    getPath(grid, endNode){\r\n        const path = [];\r\n        var current = grid[grid.length - 1];\r\n        while(current !== null){\r\n            path.unshift(current);\r\n            current = current.prevSquare;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    dijkstras(grid, startNode, endNode){\r\n        var orderedGrid = [];\r\n        var starting = grid[startNode];\r\n        starting.distance = 0;\r\n        var unvisitedSquares = [];\r\n        for(let x = 0; x < 100; x++){\r\n                unvisitedSquares.push(grid[x]);\r\n        }\r\n\r\n        while(unvisitedSquares.length > 0){\r\n            unvisitedSquares.sort((squareA, squareB) => squareA.distance - squareB.distance);\r\n            var closestSquare = unvisitedSquares.shift();\r\n            if(closestSquare.isWall === true){\r\n                continue;\r\n            }\r\n            if(closestSquare.distance === Infinity){\r\n                return orderedGrid;\r\n            }\r\n            closestSquare.visited = true;\r\n            orderedGrid.push(closestSquare);\r\n            if(unvisitedSquares[0].id === endNode){\r\n                this.updateNeighbors(closestSquare, grid);\r\n                unvisitedSquares.sort((squareA, squareB) => squareA.distance - squareB.distance);\r\n                var closestSquare = unvisitedSquares.shift();\r\n                closestSquare.visited = true;\r\n                orderedGrid.push(closestSquare);\r\n                return orderedGrid;\r\n            }\r\n            this.updateNeighbors(closestSquare, grid);\r\n        }\r\n    }\r\n\r\n    updateNeighbors(square, grid){\r\n        const neighbors = this.getNeighbors(square, grid);\r\n        for(let neighbor = 0; neighbor < neighbors.length; neighbor++){\r\n            grid[neighbors[neighbor].id].distance = square.distance +1;\r\n            grid[neighbors[neighbor].id].prevSquare = square;\r\n        }\r\n    }\r\n\r\n    getNeighbors(square, grid){\r\n        const neighbors = [];\r\n        if(square.id - 10 >= 0){\r\n            neighbors.push(grid[square.id - 10]);\r\n        }\r\n        if(square.id +10 <100){\r\n            neighbors.push(grid[square.id + 10]);\r\n        }\r\n        if((square.id + 1) % 10 !== 0){\r\n            neighbors.push(grid[square.id + 1]);\r\n        }\r\n        if((square.id - 1) % 10 !== 9 && square.id > 0){\r\n            neighbors.push(grid[square.id - 1]);\r\n        }\r\n        return neighbors.filter(neighbor => !neighbor.visited);\r\n    }\r\n}\r\n\r\nclass Start{\r\n    constructor(id){\r\n        this.style = {background: \"#00FF00\"}\r\n        this.isWall = false;\r\n        this.distance = Infinity;\r\n        this.visited = false;\r\n        this.prevSquare = null;\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass Finish{\r\n    constructor(id){\r\n        this.style = {background: \"#FF0000\"}\r\n        this.isWall = false;\r\n        this.distance = Infinity;\r\n        this.visited = false;\r\n        this.prevSquare = null;\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass Gap{\r\n    constructor(id){\r\n        this.style = {background: \"#FFF\"}\r\n        this.isWall = false;\r\n        this.distance = Infinity;\r\n        this.visited = false;\r\n        this.prevSquare = null;\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nfunction initializeGrid(){\r\n    const squares = Array(100).fill(null);\r\n    for(let x = 0; x <100; x++){\r\n        squares[x] = new Gap(x);\r\n    }\r\n    squares[22] = new Start(22);\r\n    squares[77] = new Finish(77);\r\n    return squares;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game.js';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}