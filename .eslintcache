[{"D:\\Coding Projects\\pathfinding_v2\\src\\index.js":"1","D:\\Coding Projects\\pathfinding_v2\\src\\App.js":"2","D:\\Coding Projects\\pathfinding_v2\\src\\reportWebVitals.js":"3","D:\\Coding Projects\\pathfinding_v2\\src\\Game.js":"4","D:\\Coding Projects\\pathfinding_v2\\src\\Grid.js":"5"},{"size":181,"mtime":1607916008792,"results":"6","hashOfConfig":"7"},{"size":528,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":7374,"mtime":1608122467552,"results":"10","hashOfConfig":"7"},{"size":1026,"mtime":1608117773792,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"31kz8a",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Coding Projects\\pathfinding_v2\\src\\index.js",[],["24","25"],"D:\\Coding Projects\\pathfinding_v2\\src\\App.js",[],"D:\\Coding Projects\\pathfinding_v2\\src\\reportWebVitals.js",[],"D:\\Coding Projects\\pathfinding_v2\\src\\Game.js",["26","27","28","29","30","31","32"],"import React from 'react';\r\nimport Grid from './Grid';\r\nimport './index.css';\r\nimport wall from './wall.png'\r\n\r\nexport default class Game extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            squares: initializeGrid(),\r\n        }\r\n\r\n    }\r\n\r\n    handleClick(i){\r\n        if(i !== 22 && i !== 77){\r\n            if(this.state.squares[i].isWall){\r\n                var setter = this.state.squares[i];\r\n                setter.style = {background: \"#FFF\"};\r\n                setter.isWall = false;\r\n                this.setState({setter});\r\n            }else{\r\n                var setter = this.state.squares[i];\r\n                setter.style = {backgroundImage : \"url(\"+wall+\")\"};\r\n                setter.isWall = true;\r\n                this.setState({setter})\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"game\">\r\n                <div className=\"rowa\">\r\n                    <div className=\"column\">\r\n                        <h1>Run Dijkstra's Algorithm</h1>\r\n                        <div className=\"grid\">\r\n                            <Grid \r\n                                onClick={(i) => this.handleClick(i)}\r\n                                squares={this.state.squares}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <h2>Welcome! This React based project utilizes Dijkstra's Algorithm find the shortest path between the two points. Click in the squares to add walls.</h2>\r\n                        <div className=\"row\">\r\n                            <div className=\"rowa\">\r\n                                <button \r\n                                    className={\"squareLegend \" + \"lightSquare\"}\r\n                                    style={{backgroundColor: \"FFFFFF\"}}\r\n                                ></button>\r\n                                <p> Starting Point</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"rowa\">\r\n                                <button \r\n                                    className={\"squareLegend \" +\"darkSquare\"}\r\n                                ></button>\r\n                                <p> Ending Point</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"rowa\">\r\n                                <button \r\n                                    className={\"squareLegend \" +\"wallSquare\"}\r\n                                ></button>\r\n                                <p> Click to add barriers</p>\r\n                            </div>\r\n                        </div>\r\n                        <button \r\n                            className=\"startButton\"\r\n                            onClick={(i)=> this.animateDijkstra()}\r\n                            squares={this.state.squares}\r\n                        >Start</button>\r\n                        <button\r\n                            className=\"startButton\"\r\n                            onClick={(i)=> window.location.reload()}\r\n                        >Reset</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    animateDijkstra(){\r\n        const orderedGrid = this.dijkstras(this.state.squares, 22, 77);\r\n        const finalPath = this.getPath(orderedGrid, 77);\r\n        for(var node = 0; node <orderedGrid.length; node++){\r\n            var setter = this.state.squares[orderedGrid[node].id];\r\n            setter.style = {background: \"#0000FF\"};\r\n            this.setState({setter});\r\n        }\r\n\r\n        for(var node = 0; node <finalPath.length; node++){\r\n            var setter = this.state.squares[finalPath[node].id];\r\n            setter.style = {background: \"#FFFF00\"};\r\n            this.setState({setter});\r\n        }\r\n    }\r\n\r\n    getPath(grid, endNode){\r\n        const path = [];\r\n        var current = grid[grid.length - 1];\r\n        while(current !== null){\r\n            path.unshift(current);\r\n            current = current.prevSquare;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    dijkstras(grid, startNode, endNode){\r\n        var orderedGrid = [];\r\n        var starting = grid[startNode];\r\n        starting.distance = 0;\r\n        var unvisitedSquares = [];\r\n        for(let x = 0; x < 100; x++){\r\n                unvisitedSquares.push(grid[x]);\r\n        }\r\n\r\n        while(unvisitedSquares.length > 0){\r\n            unvisitedSquares.sort((squareA, squareB) => squareA.distance - squareB.distance);\r\n            var closestSquare = unvisitedSquares.shift();\r\n            if(closestSquare.isWall === true){\r\n                continue;\r\n            }\r\n            if(closestSquare.distance === Infinity){\r\n                return orderedGrid;\r\n            }\r\n            closestSquare.visited = true;\r\n            orderedGrid.push(closestSquare);\r\n            if(unvisitedSquares[0].id === endNode){\r\n                this.updateNeighbors(closestSquare, grid);\r\n                unvisitedSquares.sort((squareA, squareB) => squareA.distance - squareB.distance);\r\n                var closestSquare = unvisitedSquares.shift();\r\n                closestSquare.visited = true;\r\n                orderedGrid.push(closestSquare);\r\n                return orderedGrid;\r\n            }\r\n            this.updateNeighbors(closestSquare, grid);\r\n        }\r\n    }\r\n\r\n    updateNeighbors(square, grid){\r\n        const neighbors = this.getNeighbors(square, grid);\r\n        for(let neighbor = 0; neighbor < neighbors.length; neighbor++){\r\n            grid[neighbors[neighbor].id].distance = square.distance +1;\r\n            grid[neighbors[neighbor].id].prevSquare = square;\r\n        }\r\n    }\r\n\r\n    getNeighbors(square, grid){\r\n        const neighbors = [];\r\n        if(square.id - 10 >= 0){\r\n            neighbors.push(grid[square.id - 10]);\r\n        }\r\n        if(square.id +10 <100){\r\n            neighbors.push(grid[square.id + 10]);\r\n        }\r\n        if((square.id + 1) % 10 !== 0){\r\n            neighbors.push(grid[square.id + 1]);\r\n        }\r\n        if((square.id - 1) % 10 !== 9 && square.id > 0){\r\n            neighbors.push(grid[square.id - 1]);\r\n        }\r\n        return neighbors.filter(neighbor => !neighbor.visited);\r\n    }\r\n}\r\n\r\nclass Start{\r\n    constructor(id){\r\n        this.style = {background: \"#00FF00\"}\r\n        this.isWall = false;\r\n        this.distance = Infinity;\r\n        this.visited = false;\r\n        this.prevSquare = null;\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass Finish{\r\n    constructor(id){\r\n        this.style = {background: \"#FF0000\"}\r\n        this.isWall = false;\r\n        this.distance = Infinity;\r\n        this.visited = false;\r\n        this.prevSquare = null;\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass Gap{\r\n    constructor(id){\r\n        this.style = {background: \"#FFF\"}\r\n        this.isWall = false;\r\n        this.distance = Infinity;\r\n        this.visited = false;\r\n        this.prevSquare = null;\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nfunction initializeGrid(){\r\n    const squares = Array(100).fill(null);\r\n    for(let x = 0; x <100; x++){\r\n        squares[x] = new Gap(x);\r\n    }\r\n    squares[22] = new Start(22);\r\n    squares[77] = new Finish(77);\r\n    return squares;\r\n}","D:\\Coding Projects\\pathfinding_v2\\src\\Grid.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":23,"column":21,"nodeType":"39","messageId":"40","endLine":23,"endColumn":27},{"ruleId":"41","severity":1,"message":"42","line":50,"column":64,"nodeType":"43","messageId":"44","endLine":50,"endColumn":65},{"ruleId":"41","severity":1,"message":"42","line":59,"column":64,"nodeType":"43","messageId":"44","endLine":59,"endColumn":65},{"ruleId":"41","severity":1,"message":"42","line":67,"column":64,"nodeType":"43","messageId":"44","endLine":67,"endColumn":65},{"ruleId":"37","severity":1,"message":"45","line":97,"column":17,"nodeType":"39","messageId":"40","endLine":97,"endColumn":21},{"ruleId":"37","severity":1,"message":"38","line":98,"column":17,"nodeType":"39","messageId":"40","endLine":98,"endColumn":23},{"ruleId":"37","severity":1,"message":"46","line":137,"column":21,"nodeType":"39","messageId":"40","endLine":137,"endColumn":34},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-redeclare","'setter' is already defined.","Identifier","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'node' is already defined.","'closestSquare' is already defined.","no-global-assign","no-unsafe-negation"]